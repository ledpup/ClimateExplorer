﻿@using Blazorise
@using ClimateExplorer.Core.Model;
@using CurrentDevice;
@using DPBlazorMapLibrary;

<div class="mapContainer collapsed" id="mapContainer">
    @if (mapOptions != null)
    {
        <DPBlazorMapLibrary.Map @ref="map" MapOptions="@mapOptions" AfterRender="@AfterMapRender"></DPBlazorMapLibrary.Map>
    }

    <div class="@(IsMapExpanded ? "mapToggleExpanded" : "mapToggleCollapsed")">
        <Button Color="Color.Primary" Clicked="@ToggleMapExpansion" Class="map-toggle-button">
            @if (IsMapExpanded)
            {
                <span><i class="fas fa-compress"></i> Collapse</span>
            }
            else
            {
                <span><i class="fas fa-expand"></i> Expand</span>
            }
        </Button>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<Location>? Locations { get; set; }
    [Parameter] public EventCallback<Guid> OnLocationChange { get; set; }
    [Parameter] public Coordinates LocationCoordinates { get; set; }

    [Inject] public LayerFactory? LayerFactory { get; init; }
    [Inject] IIconFactory? IconFactory { get; init; }
    [Inject] IJSRuntime? JsRuntime { get; init; }
    [Inject] ILogger<MapContainer>? Logger { get; init; }
    [Inject] ICurrentDeviceService? CurrentDeviceService { get; set; }

    Map? map;
    MapOptions? mapOptions;
    bool IsMapExpanded { get; set; } = false;
    bool? IsMobileDevice { get; set; }

    bool mapMarkersCreated = false;
    bool mainTileLayerCreated = false;

    int lastExpandedZoom = 8;
    int lastCollapsedZoom = 8;
    LatLng? expandedCentre = null;
    LatLng? collapsedCentre = null;

    Coordinates PreviousSeenLocationCoordinates;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsMobileDevice == null)
        {
            IsMobileDevice = await CurrentDeviceService!.Mobile();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsMobileDevice == null || PreviousSeenLocationCoordinates == LocationCoordinates)
        {
            return;
        }

        PreviousSeenLocationCoordinates = LocationCoordinates;

        InitialiseMapOptions();
        await CreateMapMarkers();
        await CreateMainTileLayer();

        if (IsMapExpanded)
        {
            await ToggleMapExpansion();
        }

        await base.OnParametersSetAsync();
    }

    private async Task AfterMapRender()
    {
        await CreateMapMarkers();
        await CreateMainTileLayer();
    }

    public async Task ScrollToPoint(Coordinates point)
    {
        if (map == null)
        {
            return;
        }

        try
        {
            var latlng = new LatLng(point.Latitude, point.Longitude);
            await map.PanTo(latlng);
        }
        catch (Exception ex)
        {
            Logger!.LogError(ex, "Error with PanTo on map");
            await Task.Delay(500);
            await ScrollToPoint(point);
        }
    }

    public async Task CreateMapMarkers()
    {
        if (Locations == null || mapOptions == null || map == null || this.IconFactory == null || this.LayerFactory == null || JsRuntime == null)
        {
            return;
        }

        if (mapMarkersCreated)
        {
            return;
        }

        Logger!.LogInformation("Creating map markers");

        var markerOptions = new List<MarkerOptions>();
        for (var i = -1; i < 11; i++)
        {
            var label = i == -1 
                                ? "negative"
                                : i == 10 
                                    ? "null" 
                                    : i.ToString();
            var iconOptions = new IconOptions
                {
                    IconUrl = $"/images/map-markers/{ label }.png",
                    IconSize = new Point(48, 48),
                    IconAnchor = new Point(23, 47),
                };

            markerOptions.Add(
                new MarkerOptions
                {
                    Alt = label,
                    Opacity = 0.75,
                    Draggable = false,
                    IconRef = await this.IconFactory.Create(iconOptions),
                });
        }

        foreach (var location in Locations)
        {
            var label = location.HeatingScore == null 
                    ? "null"
                    : location.HeatingScore.Value < 0
                        ? "negative" 
                        : location.HeatingScore.Value.ToString();


            var markerOption = markerOptions.Single(x => x.Alt == label);
            var marker = await this.LayerFactory.CreateMarkerAndAddToMap(new LatLng(location.Coordinates.Latitude, location.Coordinates.Longitude, location.Coordinates.Elevation ?? 0), map, markerOption);

            await marker.BindTooltip(location.FullTitle!);
            await marker.OnClick(async (MouseEvent mouseEvent) => await HandleMapMouseEvent(mouseEvent));
        }

        mapMarkersCreated = true;

        Logger!.LogInformation("Created map markers");
    }

    public async Task CreateMainTileLayer()
    {
        if (map == null)
        {
            return;
        }

        if (mainTileLayerCreated)
        {
            return;
        }

        Logger!.LogInformation("Creating main tile layer");

        // Create Tile Layer
        var tileLayerOptions =
            new TileLayerOptions()
                {
                    Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"
                };

        var mainTileLayer = await LayerFactory!.CreateTileLayerAndAddToMap("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", map!, tileLayerOptions);

        mainTileLayerCreated = true;

        Logger!.LogInformation("Created main tile layer");
    }

    async Task HandleMapMouseEvent(MouseEvent mouseEvent)
    {
        Logger!.LogInformation("HandleMapMouseEvent()");

        var lat = Math.Round(mouseEvent.LatLng!.Lat, 1);
        var lng = Math.Round(mouseEvent.LatLng.Lng, 1);
        var newLocation = Locations!.Single(x => Math.Round(x.Coordinates.Latitude, 1) == lat && Math.Round(x.Coordinates.Longitude, 1) == lng);
        await OnLocationChange.InvokeAsync(newLocation.Id);
    }

    async Task ToggleMapExpansion()
    {
        mapMarkersCreated = false;
        mainTileLayerCreated = false;
        mapOptions = null;

        var zoom = await map!.GetZoom();
        if (IsMapExpanded)
        {
            lastExpandedZoom = zoom;
            expandedCentre = await map!.GetCenter();
        }
        else
        {
            lastCollapsedZoom = zoom;
            collapsedCentre = new LatLng(LocationCoordinates.Latitude, LocationCoordinates.Longitude);
        }

        await JsRuntime!.InvokeVoidAsync("toggleMapExpansion", null);
        IsMapExpanded = !IsMapExpanded;

        InitialiseMapOptions();
    }

    void InitialiseMapOptions()
    {
        Logger!.LogDebug($"IsMapExpanded = {IsMapExpanded}");

        if (mapOptions == null)
        {
            var centre = new LatLng(LocationCoordinates.Latitude, LocationCoordinates.Longitude);
            mapOptions = new MapOptions()
                {
                    Center = IsMapExpanded ? expandedCentre ?? centre : collapsedCentre ?? centre,
                    Zoom = IsMapExpanded ? lastExpandedZoom : lastCollapsedZoom,
                    Dragging = !(bool)IsMobileDevice! || IsMapExpanded
                };
        }
    }
}